{"/home/travis/build/npmtest/node-npmtest-sequelize-auto/test.js":"/* istanbul instrument in package npmtest_sequelize_auto */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-auto/lib.npmtest_sequelize_auto.js":"/* istanbul instrument in package npmtest_sequelize_auto */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sequelize_auto = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sequelize_auto = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-auto/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sequelize-auto && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sequelize_auto */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sequelize_auto\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sequelize_auto.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sequelize_auto.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sequelize_auto.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sequelize_auto.__dirname + '/lib.npmtest_sequelize_auto.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-auto/node_modules/sequelize-auto/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-sequelize-auto/node_modules/sequelize-auto/lib/index.js":"var Sequelize = require('sequelize');\nvar async = require('async');\nvar fs = require('graceful-fs-extra');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar dialects = require('./dialects');\nvar _ = Sequelize.Utils._;\nvar SqlString = require('./sql-string');\n\nfunction AutoSequelize(database, username, password, options) {\n  if (options && options.dialect === 'sqlite' && ! options.storage)\n    options.storage = database;\n\n  if (database instanceof Sequelize) {\n    this.sequelize = database;\n  } else {\n    this.sequelize = new Sequelize(database, username, password, options || {});\n  }\n\n  this.queryInterface = this.sequelize.getQueryInterface();\n  this.tables = {};\n  this.foreignKeys = {};\n  this.dialect = dialects[this.sequelize.options.dialect];\n\n  this.options = _.extend({\n    global: 'Sequelize',\n    local: 'sequelize',\n    spaces: false,\n    indentation: 1,\n    directory: './models',\n    additional: {},\n    freezeTableName: true\n  }, options || {});\n}\n\nAutoSequelize.prototype.build = function(callback) {\n  var self = this;\n\n  function mapTable(table, _callback){\n    self.queryInterface.describeTable(table, self.options.schema).then(function(fields) {\n      self.tables[table] = fields\n      _callback();\n    }, _callback);\n  }\n\n  if (self.options.dialect === 'postgres' && self.options.schema) {\n    var showTablesSql = this.dialect.showTablesQuery(self.options.schema);\n    self.sequelize.query(showTablesSql, {\n      raw: true,\n      type: self.sequelize.QueryTypes.SHOWTABLES\n    }).then(function(tableNames) {\n      processTables(_.flatten(tableNames))\n    }, callback);\n  } else {\n    this.queryInterface.showAllTables().then(processTables, callback);\n  }\n\n  function processTables(__tables) {\n    if (self.sequelize.options.dialect === 'mssql')\n      __tables = _.map(__tables, 'tableName');\n\n    var tables;\n\n    if      (self.options.tables)     tables = _.intersection(__tables, self.options.tables)\n    else if (self.options.skipTables) tables = _.difference  (__tables, self.options.skipTables)\n    else                              tables = __tables\n\n    async.each(tables, mapForeignKeys, mapTables);\n\n    function mapTables(err) {\n      if (err) console.error(err)\n\n      async.each(tables, mapTable, callback);\n    }\n  }\n\n  function mapForeignKeys(table, fn) {\n    if (! self.dialect) return fn()\n\n    var sql = self.dialect.getForeignKeysQuery(table, self.sequelize.config.database)\n\n    self.sequelize.query(sql, {\n      type: self.sequelize.QueryTypes.SELECT,\n      raw: true\n    }).then(function (res) {\n      _.each(res, assignColumnDetails)\n      fn()\n    }, fn);\n\n    function assignColumnDetails(ref) {\n      // map sqlite's PRAGMA results\n      ref = _.mapKeys(ref, function (value, key) {\n        switch (key) {\n        case 'from':\n          return 'source_column';\n        case 'to':\n          return 'target_column';\n        case 'table':\n          return 'target_table';\n        default:\n          return key;\n        }\n      });\n\n      ref = _.assign({\n        source_table: table,\n        source_schema: self.sequelize.options.database,\n        target_schema: self.sequelize.options.database\n      }, ref);\n\n      if (! _.isEmpty(_.trim(ref.source_column)) && ! _.isEmpty(_.trim(ref.target_column))) {\n        ref.isForeignKey = true\n        ref.foreignSources = _.pick(ref, ['source_table', 'source_schema', 'target_schema', 'target_table', 'source_column', 'target_column'])\n      }\n\n      if (_.isFunction(self.dialect.isUnique) && self.dialect.isUnique(ref))\n        ref.isUnique = true\n\n      if (_.isFunction(self.dialect.isPrimaryKey) && self.dialect.isPrimaryKey(ref))\n        ref.isPrimaryKey = true\n\n       if (_.isFunction(self.dialect.isSerialKey) && self.dialect.isSerialKey(ref))\n         ref.isSerialKey = true\n\n      self.foreignKeys[table] = self.foreignKeys[table] || {};\n      self.foreignKeys[table][ref.source_column] = _.assign({}, self.foreignKeys[table][ref.source_column], ref);\n    }\n  }\n}\n\nAutoSequelize.prototype.run = function(callback) {\n  var self = this;\n  var text = {};\n  var tables = [];\n\n  this.build(generateText);\n\n  function generateText(err) {\n    var quoteWrapper = '\"';\n    if (err) console.error(err)\n\n    async.each(_.keys(self.tables), function(table, _callback){\n      var fields = _.keys(self.tables[table])\n        , spaces = '';\n\n      for (var x = 0; x < self.options.indentation; ++x) {\n        spaces += (self.options.spaces === true ? ' ' : \"\\t\");\n      }\n\n      text[table] = \"/* jshint indent: \" + self.options.indentation + \" */\\n\\n\";\n      text[table] += \"module.exports = function(sequelize, DataTypes) {\\n\";\n      var tableName = self.options.camelCase ? _.camelCase(table) : table;\n      text[table] += spaces + \"return sequelize.define('\" + tableName + \"', {\\n\";\n\n      _.each(fields, function(field, i){\n        // Find foreign key\n        var foreignKey = self.foreignKeys[table] && self.foreignKeys[table][field] ? self.foreignKeys[table][field] : null\n\n        if (_.isObject(foreignKey)) {\n          self.tables[table][field].foreignKey = foreignKey\n        }\n\n        // column's attributes\n        var fieldAttr = _.keys(self.tables[table][field]);\n        var fieldName = self.options.camelCase ? _.camelCase(field) : field;\n        text[table] += spaces + spaces + fieldName + \": {\\n\";\n\n        // Serial key for postgres...\n        var defaultVal = self.tables[table][field].defaultValue;\n\n        // ENUMs for postgres...\n        if (self.tables[table][field].type === \"USER-DEFINED\" && !! self.tables[table][field].special) {\n          self.tables[table][field].type = \"ENUM(\" + self.tables[table][field].special.map(function(f){ return quoteWrapper + f + quoteWrapper; }).join(',') + \")\";\n        }\n\n        var isUnique = self.tables[table][field].foreignKey && self.tables[table][field].foreignKey.isUnique\n\n        _.each(fieldAttr, function(attr, x){\n          var isSerialKey = self.tables[table][field].foreignKey && _.isFunction(self.dialect.isSerialKey) && self.dialect.isSerialKey(self.tables[table][field].foreignKey)\n\n          // We don't need the special attribute from postgresql describe table..\n          if (attr === \"special\") {\n            return true;\n          }\n\n          if (attr === \"foreignKey\") {\n            if (isSerialKey) {\n              text[table] += spaces + spaces + spaces + \"autoIncrement: true\";\n            }\n            else if (foreignKey.isForeignKey) {\n              text[table] += spaces + spaces + spaces + \"references: {\\n\";\n              text[table] += spaces + spaces + spaces + spaces + \"model: \\'\" + self.tables[table][field][attr].foreignSources.target_table + \"\\',\\n\"\n              text[table] += spaces + spaces + spaces + spaces + \"key: \\'\" + self.tables[table][field][attr].foreignSources.target_column + \"\\'\\n\"\n              text[table] += spaces + spaces + spaces + \"}\"\n            } else return true\n          }\n          else if (attr === \"primaryKey\") {\n             if (self.tables[table][field][attr] === true && (! _.has(self.tables[table][field], 'foreignKey') || (_.has(self.tables[table][field], 'foreignKey') && !! self.tables[table][field].foreignKey.isPrimaryKey)))\n              text[table] += spaces + spaces + spaces + \"primaryKey: true\";\n            else return true\n          }\n          else if (attr === \"allowNull\") {\n            text[table] += spaces + spaces + spaces + attr + \": \" + self.tables[table][field][attr];\n          }\n          else if (attr === \"defaultValue\") {\n            if (self.sequelize.options.dialect === \"mssql\" &&  defaultVal && defaultVal.toLowerCase() === '(newid())') {\n              defaultVal = null; // disable adding \"default value\" attribute for UUID fields if generating for MS SQL\n            }\n\n            var val_text = defaultVal;\n\n            if (isSerialKey) return true\n\n            //mySql Bit fix\n            if (self.tables[table][field].type.toLowerCase() === 'bit(1)') {\n              val_text = defaultVal === \"b'1'\" ? 1 : 0;\n            }\n            // mssql bit fix\n            else if (self.sequelize.options.dialect === \"mssql\" && self.tables[table][field].type.toLowerCase() === \"bit\") {\n              val_text = defaultVal === \"((1))\" ? 1 : 0;\n            }\n\n            if (_.isString(defaultVal)) {\n              var field_type = self.tables[table][field].type.toLowerCase();\n              if (field_type.indexOf('date') === 0 || field_type.indexOf('timestamp') === 0) {\n                if (_.endsWith(defaultVal, '()')) {\n                  val_text = \"sequelize.fn('\" + defaultVal.replace(/\\(\\)$/, '') + \"')\"\n                }\n                else if (_.includes(['current_timestamp', 'current_date', 'current_time', 'localtime', 'localtimestamp'], defaultVal.toLowerCase())) {\n                  val_text = \"sequelize.literal('\" + defaultVal + \"')\"\n                } else {\n                  val_text = quoteWrapper + val_text + quoteWrapper\n                }\n              } else {\n                val_text = quoteWrapper + val_text + quoteWrapper\n              }\n            }\n\n            if(defaultVal === null || defaultVal === undefined) {\n              return true;\n            } else {\n              val_text = _.isString(val_text) ? SqlString.escape(_.trim(val_text, '\"'), null, self.options.dialect) : val_text;\n\n              // don't prepend N for MSSQL when building models...\n              val_text = _.trimStart(val_text, 'N')\n              text[table] += spaces + spaces + spaces + attr + \": \" + val_text;\n            }\n          }\n          else if (attr === \"type\" && self.tables[table][field][attr].indexOf('ENUM') === 0) {\n            text[table] += spaces + spaces + spaces + attr + \": DataTypes.\" + self.tables[table][field][attr];\n          } else {\n            var _attr = (self.tables[table][field][attr] || '').toLowerCase();\n            var val = quoteWrapper + self.tables[table][field][attr] + quoteWrapper;\n\n            if (_attr === \"boolean\" || _attr === \"bit(1)\" || _attr === \"bit\") {\n              val = 'DataTypes.BOOLEAN';\n            }\n            else if (_attr.match(/^(smallint|mediumint|tinyint|int)/)) {\n              var length = _attr.match(/\\(\\d+\\)/);\n              val = 'DataTypes.INTEGER' + (!  _.isNull(length) ? length : '');\n\n              var unsigned = _attr.match(/unsigned/i);\n              if (unsigned) val += '.UNSIGNED'\n\n              var zero = _attr.match(/zerofill/i);\n              if (zero) val += '.ZEROFILL'\n            }\n            else if (_attr.match(/^bigint/)) {\n              val = 'DataTypes.BIGINT';\n            }\n            else if (_attr.match(/^varchar/)) {\n              var length = _attr.match(/\\(\\d+\\)/);\n              val = 'DataTypes.STRING' + (!  _.isNull(length) ? length : '');\n            }\n            else if (_attr.match(/^string|varying|nvarchar/)) {\n              val = 'DataTypes.STRING';\n            }\n            else if (_attr.match(/^char/)) {\n              var length = _attr.match(/\\(\\d+\\)/);\n              val = 'DataTypes.CHAR' + (!  _.isNull(length) ? length : '');\n            }\n            else if (_attr.match(/^real/)) {\n              val = 'DataTypes.REAL';\n            }\n            else if (_attr.match(/text|ntext$/)) {\n              val = 'DataTypes.TEXT';\n            }\n            else if (_attr.match(/^(date)/)) {\n              val = 'DataTypes.DATE';\n            }\n            else if (_attr.match(/^(time)/)) {\n              val = 'DataTypes.TIME';\n            }\n            else if (_attr.match(/^(float|float4)/)) {\n              val = 'DataTypes.FLOAT';\n            }\n            else if (_attr.match(/^decimal/)) {\n              val = 'DataTypes.DECIMAL';\n            }\n            else if (_attr.match(/^(float8|double precision|numeric)/)) {\n              val = 'DataTypes.DOUBLE';\n            }\n            else if (_attr.match(/^uuid|uniqueidentifier/)) {\n              val = 'DataTypes.UUIDV4';\n            }\n            else if (_attr.match(/^json/)) {\n              val = 'DataTypes.JSON';\n            }\n            else if (_attr.match(/^jsonb/)) {\n              val = 'DataTypes.JSONB';\n            }\n            else if (_attr.match(/^geometry/)) {\n              val = 'DataTypes.GEOMETRY';\n            }\n            text[table] += spaces + spaces + spaces + attr + \": \" + val;\n          }\n\n          text[table] += \",\";\n          text[table] += \"\\n\";\n        });\n\n        if (isUnique) {\n          text[table] += spaces + spaces + spaces + \"unique: true,\\n\";\n        }\n\n        if (self.options.camelCase) {\n          text[table] += spaces + spaces + spaces + \"field: '\" + field + \"',\\n\";\n        }\n\n        // removes the last `,` within the attribute options\n        text[table] = text[table].trim().replace(/,+$/, '') + \"\\n\";\n\n        text[table] += spaces + spaces + \"}\";\n        if ((i+1) < fields.length) {\n          text[table] += \",\";\n        }\n        text[table] += \"\\n\";\n      });\n\n      text[table] += spaces + \"}\";\n\n      //conditionally add additional options to tag on to orm objects\n      var hasadditional = _.isObject(self.options.additional) && _.keys(self.options.additional).length > 0;\n\n      text[table] += \", {\\n\";\n\n      text[table] += spaces + spaces  + \"tableName: '\" + table + \"',\\n\";\n\n      if (hasadditional) {\n        _.each(self.options.additional, addAdditionalOption)\n      }\n\n      text[table] = text[table].trim()\n      text[table] = text[table].substring(0, text[table].length - 1);\n      text[table] += \"\\n\" + spaces + \"}\";\n\n      function addAdditionalOption(value, key) {\n        if (key === 'name') {\n          // name: true - preserve table name always\n          text[table] += spaces + spaces + \"name: {\\n\";\n          text[table] += spaces + spaces + spaces + \"singular: '\" + table + \"',\\n\";\n          text[table] += spaces + spaces + spaces + \"plural: '\" + table + \"'\\n\";\n          text[table] += spaces + spaces + \"},\\n\";\n        }\n        else {\n          text[table] += spaces + spaces + key + \": \" + value + \",\\n\";\n        }\n      }\n\n      //resume normal output\n      text[table] += \");\\n};\\n\";\n      _callback(null);\n    }, function(){\n      self.sequelize.close();\n\n      if (self.options.directory) {\n        return self.write(text, callback);\n      }\n      return callback(false, text);\n    });\n  }\n}\n\nAutoSequelize.prototype.write = function(attributes, callback) {\n  var tables = _.keys(attributes);\n  var self = this;\n\n  mkdirp.sync(path.resolve(self.options.directory));\n\n  async.each(tables, createFile, callback);\n\n  function createFile(table, _callback) {\n    fs.writeFile(path.resolve(path.join(self.options.directory, table + '.js')), attributes[table], _callback);\n  }\n}\n\nmodule.exports = AutoSequelize\n","/home/travis/build/npmtest/node-npmtest-sequelize-auto/node_modules/sequelize-auto/lib/dialects/index.js":"\nvar sequelize = require('sequelize')\nvar _ = sequelize.Utils._;\n\nexports.sqlite = {\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} schemaName The name of the schema.\n   * @return {String}            The generated sql query.\n   */\n  getForeignKeysQuery: function(tableName, schemaName) {\n    return \"PRAGMA foreign_key_list(\" + tableName + \");\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual primary key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isPrimaryKey: function (record) {\n    return _.isObject(record) && _.has(record, 'primaryKey') && record.primaryKey === true;\n  }\n}\n\nexports.mysql = {\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} schemaName The name of the schema.\n   * @return {String}            The generated sql query.\n   */\n  getForeignKeysQuery: function(tableName, schemaName) {\n    return \"SELECT \\\n        K.CONSTRAINT_NAME as constraint_name \\\n      , K.CONSTRAINT_SCHEMA as source_schema \\\n      , K.TABLE_SCHEMA as source_table \\\n      , K.COLUMN_NAME as source_column \\\n      , K.REFERENCED_TABLE_SCHEMA AS target_schema \\\n      , K.REFERENCED_TABLE_NAME AS target_table \\\n      , K.REFERENCED_COLUMN_NAME AS target_column \\\n      , C.extra \\\n      , C.COLUMN_KEY AS column_key \\\n      FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K \\\n      LEFT JOIN INFORMATION_SCHEMA.COLUMNS AS C \\\n        ON C.TABLE_NAME = K.TABLE_NAME AND C.COLUMN_NAME = K.COLUMN_NAME \\\n      WHERE \\\n        K.TABLE_NAME = '\" + tableName + \"' \\\n        AND K.CONSTRAINT_SCHEMA = '\" + schemaName + \"';\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual foreign key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isForeignKey: function(record) {\n    return _.isObject(record) && _.has(record, 'extra') && record.extra !== \"auto_increment\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is a unique key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isUnique: function(record) {\n    return _.isObject(record) && _.has(record, 'column_key') && record.column_key.toUpperCase() === \"UNI\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual primary key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isPrimaryKey: function(record) {\n    return _.isObject(record) && _.has(record, 'constraint_name') && record.constraint_name === \"PRIMARY\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual serial/auto increment key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isSerialKey: function(record) {\n    return _.isObject(record) && _.has(record, 'extra') && record.extra === \"auto_increment\";\n  }\n}\n\nexports.mariadb = exports.mysql\n\nexports.postgres = {\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} schemaName The name of the schema.\n   * @return {String}            The generated sql query.\n   */\n  getForeignKeysQuery: function(tableName, schemaName) {\n    return 'SELECT \\\n      o.conname AS constraint_name, \\\n      (SELECT nspname FROM pg_namespace WHERE oid=m.relnamespace) AS source_schema, \\\n      m.relname AS source_table, \\\n      (SELECT a.attname FROM pg_attribute a WHERE a.attrelid = m.oid AND a.attnum = o.conkey[1] AND a.attisdropped = false) AS source_column, \\\n      (SELECT nspname FROM pg_namespace WHERE oid=f.relnamespace) AS target_schema, \\\n      f.relname AS target_table, \\\n      (SELECT a.attname FROM pg_attribute a WHERE a.attrelid = f.oid AND a.attnum = o.confkey[1] AND a.attisdropped = false) AS target_column, \\\n      o.contype, \\\n      (SELECT d.adsrc AS extra FROM pg_catalog.pg_attribute a LEFT JOIN pg_catalog.pg_attrdef d ON (a.attrelid, a.attnum) = (d.adrelid,  d.adnum) \\ WHERE NOT a.attisdropped AND a.attnum > 0 AND a.attrelid = o.conrelid AND a.attnum = o.conkey[1]\\ LIMIT 1) \\\n    FROM pg_constraint o \\\n    LEFT JOIN pg_class c ON c.oid = o.conrelid \\\n    LEFT JOIN pg_class f ON f.oid = o.confrelid \\\n    LEFT JOIN pg_class m ON m.oid = o.conrelid \\\n    WHERE o.conrelid = (SELECT oid FROM pg_class WHERE relname = \\'' + tableName + '\\' LIMIT 1)'\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual foreign key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isForeignKey: function(record) {\n    return _.isObject(record) && _.has(record, 'contype') && record.contype === \"f\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is a unique key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isUnique: function(record) {\n    return _.isObject(record) && _.has(record, 'contype') && record.contype === \"u\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual primary key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isPrimaryKey: function(record) {\n    return _.isObject(record) && _.has(record, 'contype') && record.contype === \"p\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual serial/auto increment key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isSerialKey: function(record) {\n    return _.isObject(record) && exports.postgres.isPrimaryKey(record) && (_.has(record, 'extra') &&\n          _.startsWith(record.extra, 'nextval')\n        && _.includes(record.extra, '_seq')\n        && _.includes(record.extra, '::regclass'));\n  },\n  /**\n   * Overwrites Sequelize's native method for showing all tables.\n   * This allows custom schema support\n   * @param {String} schema The schema to list all tables from\n   * @return {String}\n   */\n  showTablesQuery: function(schema) {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = '\" + schema + \"' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n}\n\nexports.mssql = {\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} schemaName The name of the schema.\n   * @return {String}            The generated sql query.\n   */\n  getForeignKeysQuery: function (tableName, schemaName) {\n    return \"SELECT \\\n      ccu.table_name AS source_table, \\\n      ccu.constraint_name AS constraint_name, \\\n      ccu.column_name AS source_column, \\\n      kcu.table_name AS target_table, \\\n      kcu.column_name AS target_column, \\\n      tc.constraint_type AS constraint_type, \\\n      c.is_identity AS is_identity \\\n    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc \\\n    INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu \\\n      ON ccu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME \\\n    LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc \\\n      ON ccu.CONSTRAINT_NAME = rc.CONSTRAINT_NAME \\\n    LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu \\\n      ON kcu.CONSTRAINT_NAME = rc.UNIQUE_CONSTRAINT_NAME AND tc.CONSTRAINT_TYPE = 'FOREIGN KEY' \\\n    INNER JOIN sys.COLUMNS c \\\n      ON c.name = ccu.column_name \\\n      AND c.object_id = OBJECT_ID(ccu.table_name) \\\n    WHERE ccu.table_name = \" + sequelize.Utils.addTicks(tableName, \"'\");\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual foreign key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isForeignKey: function (record) {\n    return _.isObject(record) && _.has(record, 'constraint_type') && record.constraint_type === \"FOREIGN KEY\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual primary key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isPrimaryKey: function (record) {\n    return _.isObject(record) && _.has(record, 'constraint_type') && record.constraint_type === \"PRIMARY KEY\";\n  },\n  /**\n   * Determines if record entry from the getForeignKeysQuery\n   * results is an actual serial/auto increment key\n   *\n   * @param {Object} record The row entry from getForeignKeysQuery\n   * @return {Bool}\n   */\n  isSerialKey: function (record) {\n    return _.isObject(record) && exports.mssql.isPrimaryKey(record) && (_.has(record, 'is_identity') &&\n      record.is_identity);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sequelize-auto/node_modules/sequelize-auto/lib/sql-string.js":"\n// https://github.com/sequelize/sequelize/blob/master/lib/sql-string.js\n'use strict';\n\n/* jshint -W110 */\nvar dataTypes = require('sequelize').DataTypes;\nvar _ = require('sequelize').Utils._;\n\nfunction escape(val, timeZone, dialect, format) {\n  var prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n      return '' + !!val;\n    case 'number':\n      return val + '';\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    var partialEscape = _.partial(escape, _, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, {escape: escape});\n    }\n    return val.map(partialEscape);\n  }\n\n  if (!val.replace) {\n    throw new Error('Invalid value ' + val);\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, function(s) {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return '\\\\' + s;\n      }\n    });\n  }\n  return (prependN ? \"N'\" : \"'\") + val + \"'\";\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error('Invalid SQL string provided: ' + sql);\n  }\n  return sql.replace(/\\?/g, function(match) {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/\\:+(?!\\d)(\\w+)/g, function(value, key) {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    } else {\n      throw new Error('Named parameter \"' + value + '\" has no value in the given object.');\n    }\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"}